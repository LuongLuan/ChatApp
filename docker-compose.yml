
services:
## Post database 
  postdb:
    image: mcr.microsoft.com/mssql/server:2019-latest

  notificationdb:
    image: mysql:8.0 

  chatdb:
    image: postgres:15-alpine 

  userdb:
    image: mongo
    
  rediscache:
    image: redis:7.2.5-alpine 

  chat.api:
    image: ${DOCKER_REGISTRY-}chatapi
    build:
      context: .
      dockerfile: Chat.Api/Dockerfile

  post.api:
    image: ${DOCKER_REGISTRY-}postapi
    build:
      context: .
      dockerfile: Post.Api/Dockerfile


  identityserver:
    image: ${DOCKER_REGISTRY-}identityserver
    build:
      context: .
      dockerfile: IdentityServer/Dockerfile


  notification.api:
    image: ${DOCKER_REGISTRY-}notificationapi
    build:
      context: .
      dockerfile: Notification.API/Dockerfile


  user.api:
    image: ${DOCKER_REGISTRY-}userapi
    build:
      context: .
      dockerfile: User.Api/Dockerfile


  user.grpc:
    image: ${DOCKER_REGISTRY-}usergrpc
    build:
      context: .
      dockerfile: User.Grpc/Dockerfile


  ocelotapigw:
    image: ${DOCKER_REGISTRY-}ocelotapigw
    build:
      context: .
      dockerfile: ApiGateways/OcelotApiGw/Dockerfile

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672"     # RabbitMQ messaging port
      - "15672:15672"   # RabbitMQ management UI
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    networks:
      - rabbitmq_net
# Define a custom network for RabbitMQ to avoid conflicts with other services
networks:
  rabbitmq_net:
    driver: bridge

#volumes section
volumes:
  sqlserver_data:
    name: sqlserver_data
  mysql_data:
    name: mysql_data
  postgres_data:
    name: postgres_data
  mongo_data:
    name: mongo_data
  redis_data:
    name: redis_data
    